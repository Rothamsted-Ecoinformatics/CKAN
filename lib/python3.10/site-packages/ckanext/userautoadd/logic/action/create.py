import ckan.logic as logic
from ckan.logic.action.create import user_create as ckan_user_create
import ckan.plugins.toolkit as toolkit
import logging

log = logging.getLogger(__name__)

def user_create(context, data_dict):
    # Create the user
    user = ckan_user_create(context, data_dict)

    org_name = toolkit.config.get('ckan.userautoadd.organization_name', '')
    role = toolkit.config.get('ckan.userautoadd.organization_role', '')
    log.debug(user['email'])
    mail = user['email']
    if not mail.endswith("rothamsted.ac.uk"):
        return user
    # Check if the organization exists
    try:
        toolkit.get_action('organization_show')(
            context, {'id': org_name}
        )
        log.debug('found the organization')
    except logic.NotFound:
        log.debug('Didn\'t find the organization')
        return user

    # Update context with sysadmin credentials
    sysadmin_username = 'gokul'  # Replace with the sysadmin username
    sysadmin_context = {
        'model': context['model'],
        'session': context['session'],
        'user': sysadmin_username,  # Use sysadmin username to ensure proper privileges
        'auth_user_obj': logic.get_action('user_show')(context, {'id': sysadmin_username})  # Ensures the sysadmin user object is used
    }

    # Add the user to the organization with the desired role
    try:
        toolkit.get_action('organization_member_create')(
            sysadmin_context, {
                'id': org_name,
                'username': user['name'],
                'role': role,
            }
        )
    except Exception as e:
        log.debug(f'Error: {e}')

    log.debug('User added')

    return user

